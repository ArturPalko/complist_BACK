// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using complist_BACK;

#nullable disable

namespace complist_BACK.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250917082456_AddDepartmentPriorityForPhonesPage")]
    partial class AddDepartmentPriorityForPhonesPage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhoneUser", b =>
                {
                    b.Property<int>("PhonesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("PhonesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PhoneUser");
                });

            modelBuilder.Entity("complist_BACK.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhonesPagePriority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("complist_BACK.Entities.Mail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("MailTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MailTypeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Mails");
                });

            modelBuilder.Entity("complist_BACK.Entities.MailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MailTypes");
                });

            modelBuilder.Entity("complist_BACK.Entities.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneTypeId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("complist_BACK.Entities.PhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneTypes");
                });

            modelBuilder.Entity("complist_BACK.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("complist_BACK.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("complist_BACK.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("complist_BACK.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("PhoneUser", b =>
                {
                    b.HasOne("complist_BACK.Entities.Phone", null)
                        .WithMany()
                        .HasForeignKey("PhonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("complist_BACK.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("complist_BACK.Entities.Mail", b =>
                {
                    b.HasOne("complist_BACK.Entities.Department", "Department")
                        .WithMany("Mails")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("complist_BACK.Entities.MailType", "MailType")
                        .WithMany("Mails")
                        .HasForeignKey("MailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("complist_BACK.Entities.Section", "Section")
                        .WithMany("Mails")
                        .HasForeignKey("SectionId");

                    b.HasOne("complist_BACK.Entities.User", "User")
                        .WithMany("Mails")
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("MailType");

                    b.Navigation("Section");

                    b.Navigation("User");
                });

            modelBuilder.Entity("complist_BACK.Entities.Phone", b =>
                {
                    b.HasOne("complist_BACK.Entities.PhoneType", "PhoneType")
                        .WithMany("Phones")
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneType");
                });

            modelBuilder.Entity("complist_BACK.Entities.Section", b =>
                {
                    b.HasOne("complist_BACK.Entities.Department", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("complist_BACK.Entities.User", b =>
                {
                    b.HasOne("complist_BACK.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("complist_BACK.Entities.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId");

                    b.HasOne("complist_BACK.Entities.Section", "Section")
                        .WithMany("Users")
                        .HasForeignKey("SectionId");

                    b.HasOne("complist_BACK.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId");

                    b.Navigation("Department");

                    b.Navigation("Position");

                    b.Navigation("Section");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("complist_BACK.Entities.Department", b =>
                {
                    b.Navigation("Mails");

                    b.Navigation("Sections");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("complist_BACK.Entities.MailType", b =>
                {
                    b.Navigation("Mails");
                });

            modelBuilder.Entity("complist_BACK.Entities.PhoneType", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("complist_BACK.Entities.Position", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("complist_BACK.Entities.Section", b =>
                {
                    b.Navigation("Mails");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("complist_BACK.Entities.User", b =>
                {
                    b.Navigation("Mails");
                });

            modelBuilder.Entity("complist_BACK.Entities.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
